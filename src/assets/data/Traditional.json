[
	{
		"title": "Cascada",
		"imagePath": "images/Methodologies/Traditional/Cascada.jpg",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"La metodología en cascada es un proceso secuencial y lineal para la gestión de proyectos. Consiste en varias fases separadas. Ninguna fase empieza hasta que haya concluido la fase anterior, y la finalización de cada fase es definitiva: la gestión en cascada no te permite regresar a una fase previa. La única forma de revisar una fase es volver a empezar desde la fase uno.",
					"A continuación se enuncian cada una de las fases:"
				]
			},
			{
				"type": "section",
				"header": "1. Recopilación y documentación de los requisitos",
				"content": [
					{
						"type": "p",
						"p": [
							"En esta etapa, se debe recopilar información integral sobre lo que requiere el proyecto. La información se puede reunir de distintas maneras, desde entrevistas y cuestionarios hasta lluvias de ideas interactivas. Al final de esta fase, los requisitos del proyecto deben quedar claros, y se debe tener un documento de requisitos que se haya distribuido a el equipo."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "2. Diseño del sistema",
				"content": [
					{
						"type": "p",
						"p": [
							"Con los requisitos definidos, el equipo diseña el sistema. No hay ninguna codificación durante esta fase, pero el equipo establece especificaciones, tales como el lenguaje de programación o los requisitos de hardware."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "3. Implementación",
				"content": [
					{
						"type": "p",
						"p": [
							"En esta fase, se hace la codificación. Los programadores toman la información de la etapa anterior y crean un producto funcional. Generalmente implementan el código en pequeñas porciones, las que se integran al final de esta fase o al principio de la siguiente."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "4. Pruebas",
				"content": [
					{
						"type": "p",
						"p": [
							"Una vez que está listo todo el código, pueden empezar las pruebas del producto. Los encargados de las pruebas encuentran los problemas y los informan metódicamente. Si surgen problemas graves, el proyecto tal vez deba regresar a la fase uno para ser evaluado nuevamente."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "5. Entrega/Instalación",
				"content": [
					{
						"type": "p",
						"p": [
							"En esta fase, el producto está completo y el equipo presenta los entregables que deberán instalarse o lanzarse."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "6. Mantenimiento",
				"content": [
					{
						"type": "p",
						"p": [
							"El producto se ha entregado al cliente y está en uso. A medida que surjan problemas, tal vez el equipo necesitará crear parches y actualizaciones para solucionarlos. Nuevamente, si surgen problemas graves, es posible que se deba regresar a la fase uno."
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"Proyectos que requieran tener un orden y organización",
					"Es útil cuando no se tiene demasiada experiencia",
					"Es óptima para tiempos de desarrollo",
					"Proyectos en los que los requerimientos se tengan de manera clara"
				]
			},
			{
				"type": "references",
				"content": [
					"https://www.lucidchart.com/blog/es/metodologia-gestion-proyectos-cascada"
				]
			}
		]
	},
	{
		"title": "Basado en Componentes",
		"imagePath": "images/Methodologies/Traditional/Basado en Componentes.png",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"Es una metodología que incorpora muchas de las características del modelo en espiral y permite establecer un objetivo mínimo alcanzable. Esta se basa en utilizar componentes existentes o creados por el desarrollador, de manera que también es posible modificar los componentes ya existentes y adecuarlos al proyecto en cuestión, para lograr el objetivo que se quiere alcanzar.",
					"A diferencia de la metodología en espiral clásica, esta se diferencia en que considera la anexión de elementos que pueden ser externos, y construir aplicaciones mediante el ensamblado de módulos de software reutilizables, los cuales fueron desarrollados de forma independiente a las aplicaciones en las que serán utilizados."
				]
			},
			{
				"type": "section",
				"header": "¿Porqué se usa?",
				"content": [
					{
						"type": "p",
						"p": [
							"Permite reutilizar piezas de código preelaborado que permiten realizar diversas tareas, conllevando a diversos beneficios como las mejoras a la calidad, la reducción del ciclo de desarrollo y el mayor retorno sobre la inversión.",
							"Al comparar la evolución del ambiente de IT con el crecimiento de las metrópolis actuales, podemos entender el origen de muchos problemas que se han presentado históricamente en la construcción de software y vislumbrar las posibles y probables soluciones que nos llevarán hacia la industrialización del software moderno"
						]
					}
				]
			},
			{
				"type": "section",
				"header": "¿Qué ventajas tiene?",
				"bodyCopy": "Se usa principalmente por las siguientes ventajas:",
				"content": [
					{
						"type": "list",
						"list": [
							"**Reutilización del software:** lo que nos lleva a alcanzar un mayor nivel de reutilización de software.",
							"**Simplificación de las pruebas:** permite que las pruebas sean ejecutadas probando cada uno de los componentes antes de probar el conjunto completo de componentes ensamblados.",
							"**Simplifica el mantenimiento del sistema:** cuando existe un débil acoplamiento entre componentes, el desabollador es libre de actualizar y/o agregar componentes según sea necesario, sin afectar otras partes del sistema.",
							"**Mayor calidad:** dado que un componente puede ser construido y luego mejorado continuamente por un experto u organización, la calidad de una aplicación basada en componentes mejorará con el paso del tiempo."
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"**Servicios Web**, donde se requiere seguir estándares de servicios y están disponibles por invocación remota.",
					"**Aplicaciones Web**, donde se puede seccionar partes del sistema con funcionalidades independientes y/o se conozca de soluciones de software de terceros que fácilmente se puedan integrar y personalizar.",
					"**Colecciones de objetos**, que son desarrollados como un paquete.",
					"**Sistemas de software**, stand-alone, que puedan ser configurados para su uso en un ambiente en particular."
				]
			},
			{
				"type": "references",
				"content": [
					"https://sites.google.com/site/lawebdelsoftware/ingenieria-de-software-1/unidad-vi",
					"https://matriarm.wordpress.com/desarrollo-basado-en-componentes/"
				]
			}
		]
	},
	{
		"title": "Modelo en V",
		"imagePath": "images/Methodologies/Traditional/ModeloV.jpg",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"Es un proceso que representa la secuencia de pasos en el desarrollo del ciclo de vida de un proyecto. Contribuye al cumplimiento integral de las funcionalidades, especificaciones y diseño del software, en conformidad con lo requerido por el cliente.",
					"Inspirado en el modelo en cascada (Waterfall model en inglés), representa todo el ciclo de vida de un proyecto y se basa en el mismo principio de gestión secuencial y lineal."
				]
			},
			{
				"type": "section",
				"header": "¿Para qué es utilizado?",
				"content": [
					{
						"type": "p",
						"p": [
							"Utilizado para ejecutar y probar procesos en una secuencia. También conocido como modelo de verificación y validación, los directores de proyecto pueden utilizar este método cuando crean software que requiere pruebas rigurosas. Esto se debe a que cada fase del ciclo de desarrollo se corresponde con una fase de prueba en el modelo V. Un equipo completa cada fase de una en una realizando la prueba correspondiente inmediatamente después del desarrollo. Esto puede ayudar a los equipos a identificar áreas de mejora, optimizar los programas y garantizar la calidad del proyecto final.",
							"Consta de:"
						]
					},
					{
						"type": "list",
						"list": [
							"Una fase descendente donde se señalan las necesidades del proyecto.",
							"Una fase ascendente donde se especifican las verificaciones de las necesidades."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Fases del Modelo V",
				"bodyCopy": "En primer lugar, el modelo V define el **curso de un proyecto** en fases individuales cada vez más detalladas:",
				"content": [
					{
						"type": "list",
						"list": [
							"Al principio del proyecto, el modelo prevé un análisis de las especificaciones del sistema planificado (fase de especificaciones).",
							"El proyecto se completa después con requisitos funcionales y no funcionales para la arquitectura del sistema (fase funcional).",
							"A esta fase le sigue el diseño del sistema, en el que se planifican los componentes y las interfaces de este (fase de diseño).",
							"Una vez completadas estas fases, se puede diseñar en detalle la arquitectura del software (codificación)."
						]
					},
					{
						"type": "p",
						"p": [
							"Es ahora cuando, de acuerdo con estos planes, comienza el desarrollo en sí del software. A continuación, tendrán lugar las fases de **control de la calidad**, también llamadas de verificación o validación, que siempre están relacionadas con cada una de las fases de desarrollo. El método V abarca las siguientes tareas:"
						]
					},
					{
						"type": "list",
						"list": [
							"Pruebas de unidad",
							"Pruebas de integración",
							"Integración del sistema",
							"Validación"
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"Cuando se necesita comunicación de las partes involucradas mediante los términos y responsabilidades.",
					"Proyectos en los que no se deban tomar muchos riesgos en su realización.",
					"Proyectos que requieran calidad de producción alta.",
					"Proyectos que requieran ahorro de costes."
				]
			},
			{
				"type": "references",
				"content": [
					"https://www.ionos.mx/digitalguide/paginas-web/desarrollo-web/modelo-v/",
					"https://historiadelaempresa.com/modelo-v"
				]
			}
		]
	},
	{
		"title": "RUP",
		"imagePath": "images/Methodologies/Traditional/RUP.jpg",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"RUP significa Rational Unified Process  Este término es un proceso creado por la empresa de ingeniería de software, Rational Software Corporation, para guiar el desarrollo de un programa. El RUP es una metodología con prácticas Lean, así como Scrum y Extreme Programming (XP). Estos métodos tienen en común el uso de buenas prácticas que ayudan a obtener técnicas rutinarias y productivas."
				]
			},
			{
				"type": "section",
				"header": "¿Cómo funciona?",
				"bodyCopy": "Es una metodología de desarrollo de software orientado a objetos que establece las bases, plantillas, y ejemplos para todos los aspectos y fases de desarrollo del software. RUP es herramientas de la ingeniería de software que combinan los aspectos del proceso de desarrollo (como fases definidas, técnicas, y prácticas) con otros componentes de desarrollo (como documentos, modelos, manuales, código fuente, etc.) dentro de un framework unificado. RUP establece cuatro fases de desarrollo cada una de las cuales está organizada en varias iteraciones separadas que deben satisfacer criterios definidos antes de emprender la próxima fase.",
				"content": [
					{
						"type": "p",
						"p": ["El modelo se detalla desde tres perspectivas:"]
					},
					{
						"type": "list",
						"list": ["Dinámica", "Estática", "Práctica"]
					},
					{
						"type": "p",
						"p": [
							"Es en la perspectiva dinámica que compone el ciclo de vida del proyecto, en el que se divide en 4 fases secuenciales, denominadas en: inicio, elaboración, construcción y transición.",
							"A continuación, se muestra cada una de ellas."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Fase de Inicio",
				"content": [
					{
						"type": "p",
						"p": [
							"Es en este momento que se elabora la planificación del proyecto con los stakeholders, son ellos quienes han descrito los requisitos para el sistema a desarrollar.",
							"La etapa se realiza en un corto período de tiempo. Guía al equipo para analizar la viabilidad del proyecto y cómo empezar a definir los primeros pasos. Usando este concepto tenemos una metodología llamada Lean Inception."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Fase de Elaboración",
				"content": [
					{
						"type": "p",
						"p": [
							"En la fase de elaboración, o elaboración, busca relevar casos, documentación, estudios base, es decir, modelos para orientar el proyecto. Esto es para orientar cuál será la mejor manera de acuerdo con las premisas de los interesados.",
							"Tras todo este conocimiento, se elabora un plan de proyecto, con todas las características y especificidades, de la forma más detallada posible."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Fase de Construcción",
				"content": [
					{
						"type": "p",
						"p": [
							"Ahí es cuando se termina la construcción del proyecto, por eso tiene ese nombre. El principal objetivo es la elaboración del producto. Dado que el método se basa en el desarrollo de software, estamos hablando de crear códigos.",
							"Además, es en esta etapa que se realizan las primeras pruebas para que se prepare la base inicial para la etapa de transición."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Fase de Transición",
				"content": [
					{
						"type": "p",
						"p": [
							"La transición se expresa como transición, es decir, la fase que pasa el proyecto desde el punto de prueba hasta la implementación.",
							"Después de todas las pruebas realizadas y con el objeto listo, llega el momento de ponerlo a disposición del usuario final, es decir, la entrega del proyecto.",
							"Además de la entrega, esta fase incluye la realización de capacitaciones y asegurar que el objeto final resuelva todos los problemas de las partes interesadas."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "A tomar en cuenta..",
				"content": [
					{
						"type": "p",
						"p": [
							"Dadas todas las fases que componen un proyecto utilizando la metodología RUP, es importante destacar que en el desarrollo de estas actividades todo el equipo necesita estar orientado a algunas prácticas y realizar los artefactos de forma alineada."
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"Se tengan procesos orientados a casos de uso.",
					"Desarrollar el software de forma iterativa.",
					"Gestionar requisitos.",
					"Utilizar arquitecturas basadas en componentes.",
					"Modelar visualmente el software.",
					"Verificar la calidad del software.",
					"Controlar los cambios de software."
				]
			},
			{
				"type": "references",
				"content": [
					"http://www.ptolomeo.unam.mx:8080/xmlui/bitstream/handle/132.248.52.100/175/A8%20Cap%C3%ADtulo%205.pdf?sequence=8",
					"https://lean-management.site/rup/"
				]
			}
		]
	},
	{
		"title": "Por Prototipos",
		"imagePath": "images/Methodologies/Traditional/Prototipo.png",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"La metodología de prototipado está relacionada con la mejora continua y el Ciclo de Deming que consiste en un proceso iterativo enfocado en diseñar, implementar, medir y ajustar un plan.",
					"En el caso de un prototipo, se podría aplicar 5 etapas en el diseño e implementación de una idea (previamente priorizada para pasar al proceso de prototipado). Esta metodología se puede aplicar en el desarrollo de nuevos negocios, prototipado web, prototipado de apps, entre otros entornos."
				]
			},
			{
				"type": "section",
				"header": "Etapas para Diseñar e Implementar un Prototipo",
				"content": [
					{
						"type": "numberList",
						"list": [
							"**Definición de los requerimientos y variables:** Lo primero es saber qué se va a explorar, cuál es el propósito del prototipo, qué elementos se requieren.",
							"**Definición de las herramientas para el diseño y testeo:** Tomando como ejemplo un prototipado web se pueden utilizar herramientas como inVision, UXPin, Figma o incluso herramientas que no requieren conocimientos de diseño o código, como proto.io. En el caso de un prototipado de apps existen herramientas como Marvelapp.",
							"**Diseño del prototipo:** Se analiza qué tipo de prototipo es el más adecuado y evalúa factores como el diseño, montaje, ergonomía, materiales, formas, dimensiones, entre otros.",
							"**Test del prototipo:** Se da a conocer el prototipo a los usuarios, se observa y registra el desempeño del prototipo, y se permite al usuario aportar ideas.",
							"**Análisis de los resultados y aprendizajes:** A partir de la definición inicial y el desempeño del prototipo, se perfecciona el concepto de solución."
						]
					},
					{
						"type": "p",
						"p": [
							"El prototipo construido debe ser lo más visual y tangible posible para generar una conversación con las personas para las cuales estamos diseñando. Además, en un entorno ágil se prioriza pasar del boceto al prototipo porque el objetivo es dedicar mayor tiempo a la creación de activos interactivos versus objetos intangibles e inactivos."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Tipos de Prototipos",
				"bodyCopy": "Dependiendo de los objetivos y las etapas del proyecto, se pueden diseñar prototipos rápidos o de alta fidelidad. Algunas diferencias son:",
				"content": [
					{
						"type": "list",
						"list": [
							"**Prototipo de baja resolución o fidelidad:** Cuando nos referimos a prototipos rápidos o Lean UX, por lo general estamos hablando de prototipos de baja fidelidad que están enfocados en el refinamiento de la interacción no en perfeccionar los detalles de implementación de la idea. Un prototipo de baja fidelidad permite iterar más rápido en comparación con un prototipo de alta fidelidad y es más barato porque se invierten menos recursos.",
							"**Prototipo de alta fidelidad:** Este tipo de prototipo se puede utilizar en etapas más avanzadas de diseño para validar aspectos y detalles del producto final, por ejemplo, imagen de marca. Un prototipo de mayor fidelidad puede ayudar a equipos de ingeniería a comprender el producto final con una mayor precisión, lo que provoca una reducción de tiempo en estimaciones y desarrollo."
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"Proyectos que requieran entregas constantes.",
					"Proyectos que pueden ser divididos modularmente.",
					"Proyectos que requieran de un vistazo rápido del desarrollo.",
					"Debe ser un sistema con el que se pueda experimentar.",
					"Debe ser comparativamente barato (menor que el 10%).",
					"Debe desarrollarse rápidamente.",
					"Énfasis en la interfaz de usuario.",
					"Equipo de desarrollo reducido.",
					"Herramientas y lenguajes adecuadas."
				]
			},
			{
				"type": "references",
				"content": [
					"https://freed.tools/blogs/ux-cx/prototipo#:~:text=cumple%20o%20no.-,Metodolog%C3%ADa%20de%20prototipo%20o%20prototipado,medir%20y%20ajustar%20un%20plan.",
					"https://www.ecured.cu/Modelo_de_prototipos"
				]
			}
		]
	},
	{
		"title": "Mobile-D",
		"imagePath": "images/Methodologies/Traditional/Mobile-D.jpg",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"El objetivo de esta metodología es conseguir ciclos de desarrollo muy rápidos en equipos muy pequeños. Se basa en metodologías para el desarrollo de aplicaciones móviles conocidas pero aplicadas de forma estricta como: extreme programming, Crystal Methodologies y Rational Unified Process.",
					"Tiene distintas fases: exploración, inicialización, fase de producto, fase de estabilización y la fase de pruebas. Cada una tiene un día de planificación y otro de entrega."
				]
			},
			{
				"type": "section",
				"header": "Fases de Mobile-D",
				"bodyCopy": "A continuación se expone detalladamente cada una de las fases:",
				"content": [
					{
						"type": "numberList",
						"list": [
							"**Fase exploración:** Se centra la atención en la planificación y en los conceptos básicos del proyecto. Aquí es donde se define el alcance del proyecto y su establecimiento con las funcionalidades donde se quiere llegar.",
							"**Fase de iniciación:** Se configura el proyecto identificando y preparando todos los recursos necesarios como hemos comentado anteriormente en esta fase la dedicaremos un día a la planificación y el resto al trabajo y publicación.",
							"**Fase de producto:** Se repiten iterativamente las subfases. Se usa el desarrollo dirigido por pruebas (TDD), antes de iniciar el desarrollo de una funcionalidad debe existir una prueba que verifique su funcionamiento. En esta fase podemos decir que se lleva a acabo toda la implementación.",
							"**Fase de estabilización:** Se realizan las acciones de integración para enganchar los posibles módulos separados en una única aplicación.",
							"**Fase de pruebas:** Una vez parado totalmente el desarrollo se pasa una fase de testeo hasta llegar a una versión estable según lo establecido en las primeras fases por el cliente. Si es necesario se reparan los errores, pero no se desarrolla nada nuevo."
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"Aplicaciones móviles.",
					"Tiempos de producción cortos.",
					"Aplicaciones híbridas.",
					"Equipos que tengan bajo número de integrantes.",
					"Aplicaciones que se puedan modula izar de forma muy pequeña.",
					"Módulos que puedan ser desarrollados de manera rápida."
				]
			},
			{
				"type": "references",
				"content": [
					"https://www.syntonize.com/metodologias-desarrollo-de-aplicaciones-moviles/#:~:text=Mobile%2DD,Methodologies%20y%20Rational%20Unified%20Process",
					"http://dspace.unach.edu.ec/handle/51000/7073#:~:text=Mobile%2DD%20es%20una%20metodolog%C3%ADa,proyecto%2C%20permitiendo%20la%20reducci%C3%B3n%20de"
				]
			}
		]
	},
	{
		"title": "Espiral",
		"imagePath": "images/Methodologies/Traditional/Espiral.png",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"Es un modelo de proceso de software evolutivo donde se pueden utilizar prototipos y unirlos para crecer la complejidad del sistema que se quiere desarrollar.",
					"Proporciona el potencial para el desarrollo rápido de versiones incrementales del software."
				]
			},
			{
				"type": "section",
				"header": "¿De qué se compone?",
				"bodyCopy": "Cada vuelta se divide en 4 sectores:",
				"content": [
					{
						"type": "numberList",
						"list": [
							"**Planificación:** determinación de los objetivos, alternativas y restricciones.",
							"**Análisis de riesgo:** análisis de alternativas e identificación/resolución de riesgos.",
							"**Ingeniería o implementación:** desarrollo del producto hasta \"el siguiente nivel\".",
							"**Evaluación:** valoración por parte del cliente de los resultados obtenidos."
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"El proyecto es grande.",
					"Se quiere que las liberaciones de software sean frecuentes.",
					"Aplica la creación de un prototipo.",
					"Es primordial un control de riesgos y costos.",
					"En proyectos catalogados de riesgo medio-alto y alto.",
					"Los requisitos son poco claros y complejos.",
					"Hay un alto grado de cambios y estos pueden aparecer en cualquier momento.",
					"El compromiso de proyecto a largo plazo está comprometido, bien sea por razones económicas u otras."
				]
			},
			{
				"type": "references",
				"content": [
					"Fuente: Desconocido. (septiembre 2013). ¿Qué es una metodología de desarrollo de Software?. [Online]. Disponible en: https://www.4rsoluciones.com/blog/una-metodologia-desarrollo-software/"
				]
			}
		]
	},
	{
		"title": "Cascada Iterativo",
		"imagePath": "images/Methodologies/Traditional/CascadaIterativo.jpg",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"Es un modelo derivado del ciclo de vida en cascada. Este modelo busca reducir el riesgo que surge entre las necesidades del usuario y el producto final por malos entendidos durante la etapa de recogida de requisitos.",
					"Consiste en la iteración de varios ciclos de vida en cascada. Al final de cada iteración se le entrega al cliente una versión mejorada o con mayores funcionalidades del producto. El cliente es quien después de cada iteración evalúa el producto y lo corrige o propone mejoras. Estas iteraciones se repetirán hasta obtener un producto que satisfaga las necesidades del cliente."
				]
			},
			{
				"type": "section",
				"header": "Fase de Análisis",
				"content": [
					{
						"type": "p",
						"p": [
							"Todo proyecto de software comienza con una fase de análisis que incluye un estudio de viabilidad y una definición de los requisitos. En el estudio de viabilidad se evalúan los costes, la rentabilidad y la factibilidad del proyecto de software. El estudio de viabilidad da como resultado un pliego de condiciones (una descripción general de los requisitos), un plan y una estimación financiera del proyecto, así como una propuesta para el cliente, si fuera necesario."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Fase de Diseño",
				"content": [
					{
						"type": "p",
						"p": [
							"La fase de diseño sirve para formular una solución específica en base a las exigencias, tareas y estrategias definidas en la fase anterior. En esta fase, los desarrolladores de software se encargan de diseñar la arquitectura de software, así como un plan de diseño detallado del mismo, centrándose en componentes concretos, como interfaces, entornos de trabajo o bibliotecas. La fase de diseño da como resultado un borrador preliminar con el plan de diseño del software, así como planes de prueba para los diferentes componentes."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Fase de Implementación",
				"content": [
					{
						"type": "p",
						"p": [
							"La arquitectura de software concebida en la fase de diseño se ejecuta en la fase de implementación, en la que se incluye la programación del software, la búsqueda de errores y las pruebas unitarias. En la fase de implementación, el proyecto de software se traduce al correspondiente lenguaje de programación. Los diversos componentes se desarrollan por separado, se comprueban a través de las pruebas unitarias y se integran poco a poco en el producto final. La fase de implementación da como resultado un producto de software que se comprueba por primera vez como producto final en la siguiente fase (prueba alfa)."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Fase de Prueba",
				"content": [
					{
						"type": "p",
						"p": [
							"La fase de prueba incluye la integración del software en el entorno seleccionado. Por norma general, los productos de software se envían en primer lugar a los usuarios finales seleccionados en versión beta (pruebas beta). Las pruebas de aceptación desarrolladas en la fase de análisis permiten determinar si el software cumple con las exigencias definidas con anterioridad. Aquellos productos de software que superan con éxito las pruebas beta están listos para su lanzamiento."
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"Proyectos con necesidades de entregas constantes.",
					"Proyectos en los que requisitos no estén totalmente definidos.",
					"Proyectos que permitan el desarrollo en pequeños ciclos.",
					"Estructuración de información clara.",
					"Proyectos que constan de diversa fase.",
					"Proyecto que requieren de desarrollo rápido."
				]
			},
			{
				"type": "references",
				"content": [
					"http://isw-udistrital.blogspot.com/2012/09/ingenieria-de-software-continuacion.html#:~:text=Es%20un%20modelo%20derivado%20del,ciclos%20de%20vida%20en%20cascada",
					"https://www.fing.edu.uy/tecnoinf/mvd/cursos/ingsoft/material/teorico/is02b-Tabla%20Comparativa%20Modelos.pdf"
				]
			}
		]
	},
	{
		"title": "Merise",
		"imagePath": "images/Methodologies/Traditional/Merise.png",
		"content": [
			{
				"type": "ImageConcept",
				"concept": [
					"El proyecto Merise fue comenzado en 1977 por el Ministerio de Industria Francés, con un método llamado Racines, pero fue hasta 1978 que se inició formalmente como Merise. El objetivo principal fue diseñar un método que permitiese a los equipos de diseño completar sus proyectos con éxito dentro del costo y tiempos planeados. Merise puede ser utilizado para el desarrollo de todo tipo de sistemas de información, desde aquellos que utilizan bases de datos hasta los que procesan eventos en tiempo real.",
					"En Merise se considera al sistema de información como un objeto artificial intermediario entre el sistema que opera y el sistema de conducción. Este enfoque mejora notablemente la calidad de las especificaciones antes de la realización y, sobre todo, conduce a sistemas que evolucionan fácilmente en caso de cambio tecnológico."
				]
			},
			{
				"type": "section",
				"header": "¿Cómo funciona Merise?",
				"bodyCopy": "Merise se basa en tres ciclos que son:",
				"content": [
					{
						"type": "list",
						"list": [
							"Ciclo de abstracción.",
							"Ciclo de vida.",
							"Ciclo de decisión."
						]
					},
					{
						"type": "p",
						"p": [
							"En cada etapa del ciclo de vida se utilizan, con una precisión cada vez mayor, los formalismos del ciclo de abstracción y se toman decisiones, al principio de forma global y, después, de forma más detallada, conforme va progresando en el trabajo.",
							"Los tres ciclos se desarrollan simultáneamente. A continuación se exponen el de abstracción y decisión:"
						]
					},
					{
						"type": "list",
						"list": [
							"**Ciclo de abstracción:** Merise utiliza tres formalismos, de lo más abstracto a lo más concreto, para modelar un sistema de información; se aplica a los procesos y a los datos. Estos tres formalismos corresponden a los tres niveles:\n**○ Conceptual:** Indica lo que el sistema tiene que resolver, trabajando con los objetos, entidades y describiendo propiedades.\n**○ Organizacional:** Indica quién lo hace, cuándo y dónde, transformando el modelo conceptual en estructural y en lógica de datos.\n**○ Operacional:** Indica cómo se hace, concretándose en definir la estructura final del gestor a utilizar.",
							"**Ciclo de decisión:** La jerarquía de decisiones es como se explica a continuación:\n○ Descomposición del SI en dominios.\n○ Orientaciones en materia de gestión y organización.\n○ Planificación de desarrollo.\n○ Elección entre procedimientos manuales y automáticos.\n○ Elección entre procedimientos en tiempo real y automatizado.\n○ Determinación de puestos de trabajo y tareas.\n○ Diseños de estados, pantallas."
						]
					},
					{
						"type": "p",
						"p": [
							"Un aspecto muy importante de Merise es que se ocupa al mismo tiempo del estudio de los datos y de los tratamientos."
						]
					}
				]
			},
			{
				"type": "section",
				"header": "Ciclo de Vida de Merise",
				"bodyCopy": "En Merise se tienen 6 Etapas que se exponen a continuación:",
				"content": [
					{
						"type": "list",
						"list": [
							"**Etapa 1 - Esquema director:** Consiste en estudiar el SI de forma global, descomponiéndolo en **dominios**. Se fijan las grandes orientaciones y se obtiene un plan de Desarrollo. Se establece un puente entre los objetivos estratégicos de la organización y sus necesidades de información.",
							"**Etapa 2 - Estudio previo:** Se realiza para cada dominio a estudiar. Se parte de la situación existente, de la que se obtiene el Modelo Organizacional de tratamientos (MOT) y el Modelo Lógico de Datos (MLD) actuales. Se elimina la organización existente y se deduce el Modelo Conceptual de Tratamientos (MCT) y el Modelo Conceptual de Datos (MCD) actuales.",
							"**Etapa 3 - Estudio detallado:** Para cada dominio, y a partir del escenario elegido en el estudio previo, se procede a un estudio detallado, realizándose el MOT, validación del MCD y el MLD. El dominio se puede descomponer en proyectos, realizándose el estudio por éstos.\nCada proyecto se descompone en aplicaciones, redactándose un cuaderno de cargas de usuarios por aplicación.",
							"**Etapa 4 - Estudio técnico:** Se compone de los siguientes pasos:\n○ Optimización del MLD, MCD y MOT.\n○ Da lugar a la realización de un Cuaderno de cargas de realización por aplicación.",
							"**Etapa 5 - Realización:** Que comprende por cada aplicación programación, pruebas e implementación.",
							"**Etapa 6 - Mantenimiento:** Se ajusta el sistema a nuevas necesidades, previstas o no; se corrigen errores detectados en el uso del sistema."
						]
					}
				]
			},
			{
				"type": "specialSection",
				"content": [
					"Proyectos de los cuales se desconozca el área que se pretende atender o investigar.",
					"Proyectos donde se pretenda entender a profundidad una problemática y generar soluciones que evolucionan paulatinamente.",
					"Proyectos donde se disponga de suficiente holgura para las primeras 4 etapas y suficientes recursos."
				]
			},
			{
				"type": "references",
				"content": [
					"https://cursos.clavijero.edu.mx/cursos/178_pds/modulo2/contenido/tema2.4.html?opc=3"
				]
			}
		]
	}
]
